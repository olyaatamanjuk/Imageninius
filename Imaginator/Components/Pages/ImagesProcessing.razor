@page "/images-processing"
@rendermode InteractiveServer

@using System.Collections.Generic
@using System.Diagnostics
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json

@inject IWebHostEnvironment env

<h3>Завантаження зображень</h3>

<!-- Вибір файлів -->
<div class="mb-3">
    <label for="fileInput" class="form-label">Оберіть файли або теку:</label>
    <InputFile id="fileInput" multiple class="form-control" OnChange="HandleSelectedFiles" @key="FileInputKey" />
</div>

<!-- Кнопки -->
<div>
    <button class="btn btn-primary" @onclick="ProcessImages">Опрацювати</button>
    <button class="btn btn-danger" @onclick="() => ClearAll(true)" >Очистити</button>
    @if (archiveReady)
    {
        <a href="api/archive/@uploadId" class="btn btn-primary" target="_blank">Завантажити архів</a>
    }
</div>

<h3>Додаткові опції:</h3>

<div>
    <label>
        <input type="checkbox" @bind="ReadAndUseMetadataFromFiles" />
        Використовувати для опису метадані з файлів
    </label>
</div>

<div>
    <label>
        <input type="checkbox" @bind="SeparatePhotosAndImages" />
        Розділити на папки фото та ілюстрації
    </label>
</div>

<div>
    <label>
        <input type="checkbox" @bind="AnalyzeStockKeywords" />
        Вивести окремо чи це ізолят і т.д.
    </label>
</div>

<hr />

<div>
    <p>
        <em>Стан:</em> <strong>@ButtonClickMessage</strong>
    </p>
</div>

<br />

<!-- Прогрес бар -->
@if (ShowProgress)
{
<div style="margin-top: 1rem;">
    <label>Прогрес: @Progress%</label>
    <div class="progress">
        <div class="progress-bar" role="progressbar" style="width: @($"{Progress}%");" aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
</div>
}

@if (processing)
{
    <p>Обробка архіву... Будь ласка, зачекайте.</p>
}
else if (archiveReady)
{
    //<a href="api/archive/@uploadId" download>Завантажити архів</a> 
    <a href="api/archive/@uploadId" target="_blank">Завантажити архів</a>
}
else if (timeoutReached)
{
    <p>Час очікування вичерпано.</p>
    <button @onclick="() => RefreshStatus(uploadId)">Спробувати знову</button>
}
else if (hasError)
{
    <p>Сталася помилка під час обробки. Спробуйте пізніше.</p>
}

<!-- Виділене зображення -->
@if (!string.IsNullOrEmpty(SelectedImage) && SelectedFileInfo!= null)
{
<div class="row align-items-start mt-4">
    <!-- Зображення -->
    <div class="col-md-4 position-relative">
        <button type="button" class="btn-close" aria-label="Close" @onclick="CancelSelection"></button>

        <img src="@SelectedImage" class="img-thumbnail"/>

    </div>

    <!-- Текстове поле -->
    <div class="col-md-8">

        <div class="mt-3">

            <EditForm Model="@SelectedFileInfo" OnValidSubmit="ApplyMetadata" class="p-4 border rounded shadow-sm bg-light">
                <div class="form-group mb-3">
                    <label for="headline" class="form-label">Опис до зображення (з метаданих оригінального файлу)</label>
                    <InputTextArea id="headline" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Prompt" placeholder="Опишіть коротко зображення для кращого розуміння контексту" />
                </div>

                <div class="form-group mb-3">
                    <label for="headline" class="form-label">Заголовок</label>
                    <InputText id="headline" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Headline" placeholder="Введіть заголовок"/>
                </div>

                <div class="form-group mb-3">
                    <label for="caption" class="form-label">Опис</label>
                    <InputTextArea id="caption" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Caption" placeholder="Введіть опис" rows="4"/>
                </div>

                <div class="form-group mb-4">
                    <label for="keywords" class="form-label">Ключові слова</label>
                    <InputTextArea id="keywords" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Keywords" placeholder="Введіть ключові слова через кому" rows="3"/>
                </div>
                
                @if (AnalyzeStockKeywords)
                {
                    <div class="form-group mb-3">
                        <label for="headline" class="form-label">Тип зображення</label>
                        <InputText id="headline" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.ContentType" placeholder="Введіть тип контенту (фото чи ілюстрація)"/>
                    </div>  
                }

                @if (AnalyzeStockKeywords)
                {
                    <div>
                        <label>
                            <input type="checkbox" @bind="SelectedFileInfo.MetadataForStock.Isolated" />
                            Isolated
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" @bind="SelectedFileInfo.MetadataForStock.CopySpace" />
                            Copy Space
                        </label>  
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" @bind="SelectedFileInfo.MetadataForStock.Mockup" />
                            Mockup
                        </label> 
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" @bind="SelectedFileInfo.MetadataForStock.CutOut" />
                            Cut Out
                        </label>  
                    </div>
                }
                

                @if (downloadUrl != null)
                {
                <div class="mt-3">
                    <a href="@downloadUrl" class="btn btn-success" download="updated-image.jpg">⬇️ Завантажити зображення з метаданими</a>
                </div>
                }
            </EditForm>



            <div>
                <p><strong>Title: </strong> @SelectedFileInfo.MetadataForStock.Headline</p>
                <p><strong>Category: </strong> @SelectedFileInfo.MetadataForStock.CategoryName</p>
                <p><strong>Description: </strong> @SelectedFileInfo.MetadataForStock.Caption</p>
                <p><strong>Keywords: </strong> @SelectedFileInfo.MetadataForStock.Keywords</p>
            </div>
        </div>

    </div>
</div>
}

<!-- Прев'ю -->
@if (PagedPreviews.Any())
{
<h5>Прев’ю зображень (сторінка @CurrentPage):</h5>
<div class="thumbnail-grid">
    @foreach (var img in PagedPreviews)
    {
    <div class="col">
        <img src="@img" @key="img" class="preview-img"@onclick="async () => await SelectImageAsync(img)" />
    </div>
    }
</div>

<!-- Пагінація -->
<div class="d-flex justify-content-between mt-3">
    <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanGoPrev)">← Назад</button>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Вперед →</button>
</div>
}

@code {
    [Inject] private IBackgroundProcessingQueue Queue { get; set; }
    private bool isUploading = false;
    private bool processing = false;
    private bool archiveReady = false;
    private int progress = 0;
    private Guid uploadId;
    private bool timeoutReached = false;
    private bool hasError = false;
    private readonly IBackgroundProcessingQueue _queue = new BackgroundProcessingQueue();
    
    private List<FullFileInfo> ListOfFiles = new();
    private FullFileInfo SelectedFileInfo;
    
    private IEnumerable<string> PagedPreviews =>
        MultipleImagePreviews.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private bool CanGoNext => (CurrentPage * PageSize) < MultipleImagePreviews.Count;
    private bool CanGoPrev => CurrentPage > 1;
    
    private Guid FileInputKey = Guid.NewGuid(); // унікальний ключ для очищення InputFile
    private List<IBrowserFile> SelectedFiles = new();
    private List<string> MultipleImagePreviews = new();
    private string fileInputKey = Guid.NewGuid().ToString();  // Генерація унікального ключа для InputFile
    private int PageSize = 50;
    private int CurrentPage = 1;
    private int Progress = 0;
    private bool ShowProgress = false;
    private string? SelectedImage = null;
    private string ButtonClickMessage = "Очікується вибір файлів...";
    private string? MetadataFromSelectedFile = null;
    private bool ShowPromptingSection = false;
    private IBrowserFile? selectedFile;
    private string? downloadUrl;

    private bool ReadAndUseMetadataFromFiles = true;
    private bool SeparatePhotosAndImages = true;
    private bool AnalyzeStockKeywords = true;
    
    [Inject]
    public IHttpClientFactory ClientFactory { get; set; }

    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = ClientFactory.CreateClient("serverAPI");
    }

    private async Task RefreshStatus(Guid id)
    {
        processing = true;
        timeoutReached = false;
        hasError = false;
        await WaitForArchiveReady(id);
    }
    
    private async Task WaitForArchiveReady(Guid id)
    {
        Console.WriteLine("🔵 WaitForArchiveReady стартував");
        
        int maxAttempts = 60;  // максимум 60 спроб
        int attempt = 0;
        int delayMs = 1000;    // початковий інтервал 1 секунда

        processing = true;
        archiveReady = false;
        timeoutReached = false;
        hasError = false;

        while (attempt < maxAttempts)
        {
            try
            {
                var status = await httpClient.GetStringAsync($"api/archive/status/{id}");

                if (status == "done")
                {
                    processing = false;
                    archiveReady = true;
                    ButtonClickMessage = "Архів готовий до завантаження";
                    StateHasChanged();
                    return;
                }
                else if (status == "error")
                {
                    processing = false;
                    hasError = true;
                    StateHasChanged();
                    return;
                }
            }
            catch
            {
                // Якщо помилка запиту - теж позначимо помилку (або можна повторити)
                processing = false;
                hasError = true;
                StateHasChanged();
                return;
            }

            attempt++;

            // Поступово збільшуємо інтервал, щоб зменшити навантаження
            await Task.Delay(delayMs);
            delayMs = Math.Min(delayMs + 500, 5000); // максимум 5 секунд між запитами

            StateHasChanged(); // оновити UI, щоб показати індикатор або таймер
        }

        // Якщо дійшли сюди — час вичерпано
        processing = false;
        timeoutReached = true;
        StateHasChanged();
    }

private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
{
    var swTotal = Stopwatch.StartNew();
    ButtonClickMessage = "Обробляються зображення";
    StateHasChanged();
    Console.WriteLine("🔵 HandleSelectedFiles стартував");

    var sw = Stopwatch.StartNew();

    List<IBrowserFile> files;
    try
    {
        files = e.GetMultipleFiles(1000).ToList();
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"❌ Помилка при отриманні файлів: {ex.Message}");
        isUploading = false;
        StateHasChanged();
        return;
    }

    sw.Stop();
    Console.WriteLine($"⏱ Отримання списку файлів: {sw.ElapsedMilliseconds} ms");

    // Розмір
    sw.Restart();
    long totalSize = files.Sum(f => f.Size);
    const long maxTotalSize = 2L * 1024 * 1024 * 1024;
    if (totalSize > maxTotalSize)
    {
        hasError = true;
        isUploading = false;
        Console.WriteLine("❌ Загальний розмір перевищує 2 GB");
        StateHasChanged();
        return;
    }
    sw.Stop();
    Console.WriteLine($"⏱ Підрахунок загального розміру: {sw.ElapsedMilliseconds} ms");

    try
    {
        using var content = new MultipartFormDataContent();
        ShowProgress = true;
        Progress = 0;

        int processedFiles = 0;
        int totalFiles = files.Count;

        foreach (var file in files)
        {
            using var stream = file.OpenReadStream(1024 * 1024 * 50);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var fileBytes = ms.ToArray();

            var byteContent = new ByteArrayContent(fileBytes);
            byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            content.Add(byteContent, "files", file.Name);
                    
            // Додаємо файл і його Base64 представлення
            FullFileInfo _FileInfo = new();

            _FileInfo.File = file;
            _FileInfo.Name = file.Name;
            _FileInfo.MetadataForStock.Prompt = await _FileInfo.MetadataForStock.GetPromptFromMetadata(_FileInfo);
                    
            ListOfFiles.Add(_FileInfo);
                  
            processedFiles++;
            Progress = (int)((double)processedFiles / files.Count * 100);
            StateHasChanged(); // Обновлення UI після кожної обробки
        }

        sw.Restart();
        ShowProgress = false;
        
        var response = await httpClient.PostAsync("api/archive/uploadfiles", content);
        sw.Stop();
        Console.WriteLine($"⏱ Завантаження на сервер: {sw.ElapsedMilliseconds} ms");

        sw.Restart();
        var raw = await response.Content.ReadAsStringAsync();
        sw.Stop();
        Console.WriteLine($"⏱ Читання відповіді сервера: {sw.ElapsedMilliseconds} ms");

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"❌ Помилка при завантаженні: {response.StatusCode}");
            hasError = true;
            return;
        }

        if (!Guid.TryParse(raw.Trim('"'), out uploadId))
        {
            Console.WriteLine("❌ Не вдалося розпарсити GUID");
            hasError = true;
            return;
        }

        ButtonClickMessage = "Зображення успішно завантажено на сервер";
       
        MultipleImagePreviews.Clear();
        foreach (var file in ListOfFiles)
        {
            // Файли лежать у wwwroot/uploads/{uploadId}/
            // Тобто URL буде /uploads/{uploadId}/{filename}
            var url = $"/uploads/{uploadId}/{file.Name}";
            MultipleImagePreviews.Add(url);
            file.DownloadUrl = Path.Combine(env.WebRootPath, url);
        }
        
        Console.WriteLine($"✅ UploadId: {uploadId}");
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"❌ Виняток: {ex.Message}");
    }
    finally
    {
        isUploading = false;
        StateHasChanged();
        swTotal.Stop();
        Console.WriteLine($"⏱ Загальний час виконання: {swTotal.ElapsedMilliseconds} ms");
    }
}


    
    private void CancelSelection()
    {
        // Скидає вибір зображення
        SelectedImage = null;
    }

    private void NextPage()
    {
        if (CanGoNext) CurrentPage++;
    }

    private void PrevPage()
    {
        if (CanGoPrev) CurrentPage--;
    }
    
    public class SomeObj
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    private void ClearAll(bool withrender)
    {
        try
        {
            SelectedFiles.Clear();
            ListOfFiles.Clear();
            MultipleImagePreviews.Clear();

            if (withrender)
            {
                FileInputKey = Guid.NewGuid(); // примушує Blazor перерендерити InputFile  
            }
            
            CurrentPage = 1;
            Progress = 0;
            SelectedImage = null;
            SelectedFileInfo = null;
            ShowProgress = false;
            ShowPromptingSection = false;
            
            ButtonClickMessage = "Скинуто. Ви можете вибрати нові файли.";
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
 
    }
    
    private async Task SelectImageAsync(string image)
    {
        SelectedImage = image;
        
        
        var base64Data = SelectedImage.Substring(SelectedImage.IndexOf(",") + 1);
        SelectedFileInfo = ListOfFiles.Find(m => m.Name == Path.GetFileName(image));

        if (SelectedFileInfo!= null)
        {
            if (string.IsNullOrEmpty(SelectedFileInfo.MetadataForStock.Prompt))
            {
                SelectedFileInfo.MetadataForStock.Prompt = await SelectedFileInfo.MetadataForStock.GetPromptFromMetadata(SelectedFileInfo);
            }
        }
    }

    /*private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
  {
      Console.WriteLine("🔵 HandleSelectedFiles стартував");

      isUploading = true;
      processing = false;
      archiveReady = false;
      progress = 0;
      hasError = false;
      StateHasChanged();


      List<IBrowserFile> files;
      try
      {
          files = e.GetMultipleFiles(1000).ToList();
      }
      catch (Exception ex)
      {
          hasError = true;
          Console.WriteLine($"❌ Помилка при отриманні файлів: {ex.Message}");
          isUploading = false;
          StateHasChanged();
          return;
      }

      // Обмеження на загальний розмір
      long totalSize = files.Sum(f => f.Size);
      const long maxTotalSize = 2L * 1024 * 1024 * 1024; //2GB
      if (totalSize > maxTotalSize)
      {
          hasError = true;
          isUploading = false;
          Console.WriteLine("❌ Загальний розмір перевищує 1 GB");
          StateHasChanged();
          return;
      }

      var client = ClientFactory.CreateClient("serverAPI");

      try
      {
         // var batches = files.Chunk(10).ToList();
          int currentFile = 0;


              using var content = new MultipartFormDataContent();

              foreach (var file in files)
              {
                  using var stream = file.OpenReadStream(1024 * 1024 * 50);
                  using var ms = new MemoryStream();
                  await stream.CopyToAsync(ms);
                  var fileBytes = ms.ToArray();

                  var byteContent = new ByteArrayContent(fileBytes);
                  byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                  content.Add(byteContent, "files", file.Name);

                  StateHasChanged();
              }

              var response = await client.PostAsync("api/archive/upload", content);

              if (!response.IsSuccessStatusCode)
              {
                  Console.WriteLine($"❌ Помилка при завантаженні батчу: {response.StatusCode}");
                  hasError = true;
                  return;
              }

              var raw = await response.Content.ReadAsStringAsync();
              if (!Guid.TryParse(raw.Trim('"'), out uploadId))
              {
                  Console.WriteLine("❌ Не вдалося розпарсити GUID");
                  hasError = true;
                  return;
              }

              progress = (int)((double)currentFile / files.Count * 100);

              Console.WriteLine($"✅ Батч завантажено. UploadId: {uploadId}");
              StateHasChanged();


          processing = true;
          Console.WriteLine("🟢 Чекаємо на готовність архіву...");
          await WaitForArchiveReady(uploadId);
      }
      catch (Exception ex)
      {
          hasError = true;
          Console.WriteLine($"❌ Виняток: {ex.Message}");
      }
      finally
      {
          isUploading = false;
          StateHasChanged();
      }
  }*/
private async Task ProcessImages()
{
    if (ListOfFiles.Count > 0)
    {
        ButtonClickMessage = $"Файлів до опрацювання: {SelectedFiles.Count}";
        StateHasChanged();
            
        ButtonClickMessage = $"Розпочато процес опрацювання...";
        StateHasChanged();

        int processed = 0;
        var tasks = new List<Task>();
        foreach (FullFileInfo _fullFileInfo in ListOfFiles)
        {
            SelectedFileInfo = _fullFileInfo;

            try
            {
                //tasks.Add(SendPrompt());
                await SendPrompt();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Помилка: " + ex.Message);
                ButtonClickMessage = $"Помилка при обробці {SelectedFileInfo.File.Name}: {ex.Message}";
                StateHasChanged();
                continue; // переходимо до наступного файлу
            }

            processed++;
            ButtonClickMessage = $"Файлів опрацьовано : {processed} з {ListOfFiles.Count}";
            StateHasChanged();
        }

       // await Task.WhenAll(tasks);
        
        await ApplyMetadata();

        ButtonClickMessage = "Формується архів...";
        StateHasChanged();

        await Task.Yield();
        
        List<FileInfoSimple> ListOfFilesSimple = ListOfFiles
            .Select(f => new FileInfoSimple
            {
                MetadataForStock = f.MetadataForStock,
                NewBase64 = f.NewBase64,
                Name = f.File.Name
            })
            .ToList();
        
        // Надсилаємо запит
        
        var json = JsonSerializer.Serialize(ListOfFilesSimple);
        Console.WriteLine(json);
        var responseCSV    = await httpClient.PostAsJsonAsync($"api/archive/createcsv/{uploadId}", ListOfFilesSimple);
        
        var response = await httpClient.PostAsJsonAsync($"api/archive/uploadzip/{uploadId}", ListOfFilesSimple);

        
        if (!response.IsSuccessStatusCode)
        {
             Console.WriteLine($"❌ Помилка при завантаженні батчу");
             hasError = true;
            return;
         }
         else
        {
             Console.WriteLine($" Запущено моніторинг результату");
             await WaitForArchiveReady(uploadId);   
        }
        
        
        // if (response.ToString() != "OK")
        // {
        //     Console.WriteLine($"❌ Помилка при завантаженні батчу");
        //     hasError = true;
        //     return;
        // }
        // else
        // {
        //     Console.WriteLine($" Запущено моніторинг результату");
        //     await WaitForArchiveReady(uploadId);   
        // }
    }
}

private async Task ApplyMetadata()
{
    if (SelectedFileInfo == null)
        return;
    
    List<FileInfoSimple> ListOfFilesSimple = ListOfFiles
        .Select(f => new FileInfoSimple
        {
            MetadataForStock = f.MetadataForStock,
            NewBase64 = f.NewBase64,
            Name = f.File.Name
        })
        .ToList();

    var response = await httpClient.PostAsJsonAsync($"api/archive/setmetadata/{uploadId}", ListOfFilesSimple);
}

  private string Prompt { get; set; } = @"Act as a professional stock content expert with deep knowledge of visual trends, keyword optimization, and commercial relevance. Your task is to analyze the uploaded image and generate a structured stock-ready output in valid JSON format, using the most accurate and up-to-date stock terminology.

Ensure the content is highly relevant, commercially usable, and optimized for searchability. Use trendy, specific, and high-ranking keywords commonly used on platforms like Shutterstock, Adobe Stock, iStock, etc. Avoid generic or outdated terms.

Your response must include the following fields:

""title"" – A short, descriptive, and engaging title (maximum 10 words).

""categoryName"" – The most accurate image category based on standard stock taxonomy.
 (1. Animals: Content related to animals, insects, or pets — at home or in the wild. 
2. Buildings and Architecture: Structures like homes, interiors, offices, temples, barns, factories, and shelters. 
3. Business: People in business settings, offices, business concepts, finance, and money
4. Drinks: Content related to beer, wine, spirits, and other drinks. 
5. The Environment: Depictions of nature or the places we work and live. 
6. States of Mind: Content related to people’s emotions and inner voices. 
7. Food: Anything focused on food and eating. 
8. Graphic Resources: Backgrounds, textures, and symbols. 
9. Hobbies and Leisure: Pastime activities that bring joy and/or relaxation, such as knitting, building model airplanes, and sailing. 
10. Industry: Depictions of work and manufacturing, like building cars, forging steel, producing clothing, or producing energy. 
11. Landscape: Vistas, cities, nature, and other locations. 
12. Lifestyle: The environments and activities of people at home, work, and play. 
13. People: People of all ages, ethnicities, cultures, genders, and abilities. 
14. Plants and Flowers: Close-ups of the natural world. 
15. Culture and Religion: Depictions of the traditions, beliefs, and cultures of people around the world. 
16. Science: Content with a focus on the applied, natural, medical, and theoretical sciences. 
17. Social Issues: Poverty, inequality, politics, violence, and other depictions of social issues. 
18. Sports: Content focused on sports and fitness, including football, basketball, hunting, yoga, and skiing. 
19. Technology: Computers, smartphones, virtual reality, and other tools designed to increase productivity. 
20. Transport: Different types of transportation, including cars, buses, trains, planes, and highway systems. 
21. Travel: Local and worldwide travel, culture, and lifestyles.)

""category"" – number related to ""categoryName"" 

""description"" – A clear, medium-length description (2–3 sentences) that highlights the visual content, composition, colors, emotions, and possible commercial applications (maximum 150 characters, it is strong rule!).

 ""keywords"" – CSV formatted string with default separator (a comma): exactly 30 keywords that are strictly based on the actual visual content of the image. Include only highly relevant, specific, and stock-optimized terms. Use words like ""isolated"", ""copy space"", ""cut out"", ""mockup"", ""flat lay"", ""top view"", ""minimalist"", ""authentic"", ""trendy"", ""vibrant colors"", ""clean design"", etc., only if they are clearly visible and appropriate for the image. Do not guess or assume — include only what is visually and contextually accurate.";


  private string PromptSpecialKeywords { get; set; } = @"
""isolated"" – true/false — Is the object isolated on a white or transparent background, with no surrounding elements or shadows?
""copyspace"" – true/false — Does the image include intentional empty space for adding text or logos?
""mockup"" – true/false — Does the image contain a mockup element (e.g., screen, t-shirt, mug) designed to showcase custom content or design?
""cutout"" – true/false — Is the object completely cut out from the background, possibly on a transparent background?";

  private string PromptImageType { get; set; } = @"
""contentType"" – photo/illustration";

    private string Response { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;


    private async Task SendPrompt()
    {
        if (string.IsNullOrWhiteSpace(Prompt)) return;

        IsLoading = true;
        Response = "";

        try
        {
            string _promtforgemmini = Prompt;

            if (AnalyzeStockKeywords)
            {
                _promtforgemmini = _promtforgemmini + PromptSpecialKeywords;
            }
            
            if (SeparatePhotosAndImages)
            {
                _promtforgemmini = _promtforgemmini + PromptImageType;
            }

            if (ReadAndUseMetadataFromFiles && !string.IsNullOrEmpty(SelectedFileInfo.MetadataForStock.Prompt))
            {
                _promtforgemmini = _promtforgemmini +  "\n\n For better context, here is the prompt used to generate the image:" + SelectedFileInfo.MetadataForStock.Prompt;
            }
            var resultDict = await Gemini.GetImageInfo(SelectedFileInfo, _promtforgemmini);
            await Task.Delay(1000);
            
            SelectedFileInfo.MetadataForStock.Headline = resultDict.GetValueOrDefault("title").ToString();
            SelectedFileInfo.MetadataForStock.Keywords = resultDict.GetValueOrDefault("keywords").ToString();
            SelectedFileInfo.MetadataForStock.Caption = resultDict.GetValueOrDefault("description").ToString();
            SelectedFileInfo.MetadataForStock.Category = Int32.Parse(resultDict.GetValueOrDefault("category").ToString());
            SelectedFileInfo.MetadataForStock.CategoryName = resultDict.GetValueOrDefault("categoryName").ToString();

            if (AnalyzeStockKeywords)
            {
                SelectedFileInfo.MetadataForStock.Isolated = bool.Parse(resultDict.GetValueOrDefault("isolated").ToString());
                SelectedFileInfo.MetadataForStock.CutOut = bool.Parse(resultDict.GetValueOrDefault("cutout").ToString());
                SelectedFileInfo.MetadataForStock.CopySpace = bool.Parse(resultDict.GetValueOrDefault("copyspace").ToString());
                SelectedFileInfo.MetadataForStock.Mockup = bool.Parse(resultDict.GetValueOrDefault("mockup").ToString());
            }

            if (SeparatePhotosAndImages)
            {
                SelectedFileInfo.MetadataForStock.ContentType = resultDict.GetValueOrDefault("contentType").ToString();
            }
            
            
            //   string json = await Gemini.GetAnswer(filePath, apiKey, Prompt);
            //resultDict = await Gemini.GetAnswerD(filePath, apiKey, Prompt);

            // Response = json;
        }
        catch (Exception ex)
        {
            Response = $"❌ Помилка: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

/*private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
{
    Console.WriteLine("🔵 HandleSelectedFiles стартував");

    isUploading = true;
    processing = false;
    archiveReady = false;
    progress = 0;
    hasError = false;
    StateHasChanged();

    
    List<IBrowserFile> files;
    try
    {
        files = e.GetMultipleFiles(1000).ToList();
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"❌ Помилка при отриманні файлів: {ex.Message}");
        isUploading = false;
        StateHasChanged();
        return;
    }

    // Обмеження на загальний розмір
    long totalSize = files.Sum(f => f.Size);
    const long maxTotalSize = 2L * 1024 * 1024 * 1024; //2GB
    if (totalSize > maxTotalSize)
    {
        hasError = true;
        isUploading = false;
        Console.WriteLine("❌ Загальний розмір перевищує 1 GB");
        StateHasChanged();
        return;
    }

    var client = ClientFactory.CreateClient("serverAPI");

    try
    {
        var batches = files.Chunk(10).ToList();
        int currentFile = 0;

        foreach (var batch in batches)
        {
            Console.WriteLine("🔵 HandleSelectedFiles оброблює батч");
            
            using var content = new MultipartFormDataContent();

            foreach (var file in batch)
            {
                await using var stream = file.OpenReadStream(1024 * 1024 * 50); // до 50MB
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                var streamContent = new StreamContent(memoryStream);
                streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                content.Add(streamContent, "files", file.Name);
            }

            Console.WriteLine("➡️ Відправка батчу...");
            var response = await client.PostAsync("api/archive/upload", content);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"❌ Помилка при завантаженні батчу: {response.StatusCode}");
                hasError = true;
                return;
            }

            var raw = await response.Content.ReadAsStringAsync();
            if (!Guid.TryParse(raw.Trim('"'), out uploadId))
            {
                Console.WriteLine("❌ Не вдалося розпарсити GUID");
                hasError = true;
                return;
            }

            currentFile += batch.Count();
            progress = (int)((double)currentFile / files.Count * 100);

            Console.WriteLine($"✅ Батч завантажено. UploadId: {uploadId}, Прогрес: {progress}%");
            StateHasChanged();
        }

        processing = true;
        Console.WriteLine("🟢 Чекаємо на готовність архіву...");
        await WaitForArchiveReady(uploadId);
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"❌ Виняток: {ex.Message}");
    }
    finally
    {
        isUploading = false;
        StateHasChanged();
    }
}*/




    
}

<style>
    .preview-img {
        width: 100%;
        max-height: 150px;
        max-width: 150px;
        object-fit: cover;
        border: 2px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }
    .thumbnail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        margin-top: 1rem;
    }
</style>