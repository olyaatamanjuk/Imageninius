@page "/images-processing"
@rendermode InteractiveServer

@using System.Collections.Generic
@using System.Net.Http.Headers


@inject IHttpClientFactory ClientFactory

<h3>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å</h3>

<InputFile OnChange="HandleSelectedFiles" multiple />
<br />
@if (processing)
{
    <p>–û–±—Ä–æ–±–∫–∞ –∞—Ä—Ö—ñ–≤—É... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.</p>
}
else if (archiveReady)
{
    //<a href="api/archive/@uploadId" download>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤</a> 
    <a href="api/archive/@uploadId" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤</a>
}
else if (timeoutReached)
{
    <p>–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ.</p>
    <button @onclick="() => RefreshStatus(uploadId)">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
}
else if (hasError)
{
    <p>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
}

@code {
    [Inject] private IBackgroundProcessingQueue Queue { get; set; }
    private bool isUploading = false;
    private bool processing = false;
    private bool archiveReady = false;
    private int progress = 0;
    private Guid uploadId;
    private bool timeoutReached = false;
    private bool hasError = false;

    private async Task RefreshStatus(Guid id)
    {
        processing = true;
        timeoutReached = false;
        hasError = false;
        await WaitForArchiveReady(id);
    }
    
    private async Task WaitForArchiveReady(Guid id)
    {
        Console.WriteLine("üîµ WaitForArchiveReady —Å—Ç–∞—Ä—Ç—É–≤–∞–≤");
        
        int maxAttempts = 60;  // –º–∞–∫—Å–∏–º—É–º 60 —Å–ø—Ä–æ–±
        int attempt = 0;
        int delayMs = 1000;    // –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª 1 —Å–µ–∫—É–Ω–¥–∞

        processing = true;
        archiveReady = false;
        timeoutReached = false;
        hasError = false;

        while (attempt < maxAttempts)
        {
            try
            {
                var client = ClientFactory.CreateClient("serverAPI");
                var status = await client.GetStringAsync($"api/archive/status/{id}");

                if (status == "done")
                {
                    processing = false;
                    archiveReady = true;
                    StateHasChanged();
                    return;
                }
                else if (status == "error")
                {
                    processing = false;
                    hasError = true;
                    StateHasChanged();
                    return;
                }
            }
            catch
            {
                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É - —Ç–µ–∂ –ø–æ–∑–Ω–∞—á–∏–º–æ –ø–æ–º–∏–ª–∫—É (–∞–±–æ –º–æ–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏)
                processing = false;
                hasError = true;
                StateHasChanged();
                return;
            }

            attempt++;

            // –ü–æ—Å—Ç—É–ø–æ–≤–æ –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await Task.Delay(delayMs);
            delayMs = Math.Min(delayMs + 500, 5000); // –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

            StateHasChanged(); // –æ–Ω–æ–≤–∏—Ç–∏ UI, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–±–æ —Ç–∞–π–º–µ—Ä
        }

        // –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ ‚Äî —á–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ
        processing = false;
        timeoutReached = true;
        StateHasChanged();
    }
    
  private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
{
    Console.WriteLine("üîµ HandleSelectedFiles —Å—Ç–∞—Ä—Ç—É–≤–∞–≤");

    isUploading = true;
    processing = false;
    archiveReady = false;
    progress = 0;
    hasError = false;
    StateHasChanged();

    
    List<IBrowserFile> files;
    try
    {
        files = e.GetMultipleFiles(1000).ToList();
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤: {ex.Message}");
        isUploading = false;
        StateHasChanged();
        return;
    }

    // –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    long totalSize = files.Sum(f => f.Size);
    const long maxTotalSize = 2L * 1024 * 1024 * 1024; //2GB
    if (totalSize > maxTotalSize)
    {
        hasError = true;
        isUploading = false;
        Console.WriteLine("‚ùå –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î 1 GB");
        StateHasChanged();
        return;
    }

    var client = ClientFactory.CreateClient("serverAPI");

    try
    {
       // var batches = files.Chunk(10).ToList();
        int currentFile = 0;

      
            using var content = new MultipartFormDataContent();
            
            foreach (var file in files)
            {
                using var stream = file.OpenReadStream(1024 * 1024 * 50);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var fileBytes = ms.ToArray();

                var byteContent = new ByteArrayContent(fileBytes);
                byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(byteContent, "files", file.Name);
                
                StateHasChanged();
            }
            
            var response = await client.PostAsync("api/archive/upload", content);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±–∞—Ç—á—É: {response.StatusCode}");
                hasError = true;
                return;
            }

            var raw = await response.Content.ReadAsStringAsync();
            if (!Guid.TryParse(raw.Trim('"'), out uploadId))
            {
                Console.WriteLine("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ GUID");
                hasError = true;
                return;
            }
            
            progress = (int)((double)currentFile / files.Count * 100);

            Console.WriteLine($"‚úÖ –ë–∞—Ç—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. UploadId: {uploadId}");
            StateHasChanged();
        

        processing = true;
        Console.WriteLine("üü¢ –ß–µ–∫–∞—î–º–æ –Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∞—Ä—Ö—ñ–≤—É...");
        await WaitForArchiveReady(uploadId);
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"‚ùå –í–∏–Ω—è—Ç–æ–∫: {ex.Message}");
    }
    finally
    {
        isUploading = false;
        StateHasChanged();
    }
}
    

/*private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
{
    Console.WriteLine("üîµ HandleSelectedFiles —Å—Ç–∞—Ä—Ç—É–≤–∞–≤");

    isUploading = true;
    processing = false;
    archiveReady = false;
    progress = 0;
    hasError = false;
    StateHasChanged();

    
    List<IBrowserFile> files;
    try
    {
        files = e.GetMultipleFiles(1000).ToList();
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤: {ex.Message}");
        isUploading = false;
        StateHasChanged();
        return;
    }

    // –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    long totalSize = files.Sum(f => f.Size);
    const long maxTotalSize = 2L * 1024 * 1024 * 1024; //2GB
    if (totalSize > maxTotalSize)
    {
        hasError = true;
        isUploading = false;
        Console.WriteLine("‚ùå –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î 1 GB");
        StateHasChanged();
        return;
    }

    var client = ClientFactory.CreateClient("serverAPI");

    try
    {
        var batches = files.Chunk(10).ToList();
        int currentFile = 0;

        foreach (var batch in batches)
        {
            Console.WriteLine("üîµ HandleSelectedFiles –æ–±—Ä–æ–±–ª—é—î –±–∞—Ç—á");
            
            using var content = new MultipartFormDataContent();

            foreach (var file in batch)
            {
                await using var stream = file.OpenReadStream(1024 * 1024 * 50); // –¥–æ 50MB
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                var streamContent = new StreamContent(memoryStream);
                streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                content.Add(streamContent, "files", file.Name);
            }

            Console.WriteLine("‚û°Ô∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á—É...");
            var response = await client.PostAsync("api/archive/upload", content);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±–∞—Ç—á—É: {response.StatusCode}");
                hasError = true;
                return;
            }

            var raw = await response.Content.ReadAsStringAsync();
            if (!Guid.TryParse(raw.Trim('"'), out uploadId))
            {
                Console.WriteLine("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ GUID");
                hasError = true;
                return;
            }

            currentFile += batch.Count();
            progress = (int)((double)currentFile / files.Count * 100);

            Console.WriteLine($"‚úÖ –ë–∞—Ç—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. UploadId: {uploadId}, –ü—Ä–æ–≥—Ä–µ—Å: {progress}%");
            StateHasChanged();
        }

        processing = true;
        Console.WriteLine("üü¢ –ß–µ–∫–∞—î–º–æ –Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∞—Ä—Ö—ñ–≤—É...");
        await WaitForArchiveReady(uploadId);
    }
    catch (Exception ex)
    {
        hasError = true;
        Console.WriteLine($"‚ùå –í–∏–Ω—è—Ç–æ–∫: {ex.Message}");
    }
    finally
    {
        isUploading = false;
        StateHasChanged();
    }
}*/




    
}