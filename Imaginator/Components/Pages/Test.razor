@page "/test"

<h3>Test</h3>

@using System.Text.Json
@using System.Text
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue

@rendermode InteractiveServer

<h3>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å</h3>

<!-- –í–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ -->
<div class="mb-3">
    <label for="fileInput" class="form-label">–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –∞–±–æ —Ç–µ–∫—É:</label>
    <InputFile id="fileInput" multiple class="form-control" OnChange="HandleFileSelection" @key="FileInputKey" />
</div>

<!-- –ö–Ω–æ–ø–∫–∏ -->
<div>
    <button class="btn btn-primary" @onclick="ProcessImages">–û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏</button>
    <button class="btn btn-danger" @onclick="() => ClearAll(true)" >–û—á–∏—Å—Ç–∏—Ç–∏</button>
    @if (downloadUrl != null)
    {
        <a href="@downloadUrl" class="btn btn-primary" download="files.zip">>üíæ –°–∫–∞—á–∞—Ç–∏ –∞—Ä—Ö—ñ–≤</a>
    }
</div>

@if (ShowPromptingSection)
{
    <div class="alert alert-info mt-3">
        
        <a href="@downloadUrl" class="btn btn-success" download="files.zip">–°–∫–∞—á–∞—Ç–∏ –∞—Ä—Ö—ñ–≤</a>
        
        
        <strong>–ü–µ–≤–Ω–∏–π –±–ª–æ–∫ –∑—è–≤–∏–≤—Å—è!</strong> –±–ª–∞ –±–ª–∞ –±–ª–∞.


        <h3>Gemini Prompt</h3>

        <div class="mb-3">
            <label for="promptInput" class="form-label">–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç:</label>
            <InputTextArea id="promptInput"
                           class="form-control"
                           @bind-Value="Prompt"
                           placeholder="–û–ø–∏—à–∏, —â–æ –Ω–∞ —Ñ–æ—Ç–æ..."
                           rows="10"/>
        </div>

        <button class="btn btn-primary mb-3" @onclick="SendPrompt" disabled="@IsLoading">
            @(IsLoading ? "–ó–∞—á–µ–∫–∞–π—Ç–µ..." : "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")
        </button>

        <!--  @if (!string.IsNullOrWhiteSpace(Response)) 
    {
    <div>
        <label class="form-label">–í—ñ–¥–ø–æ–≤—ñ–¥—å:</label>
        <textarea class="form-control" rows="12" readonly>@Response</textarea>
    </div>
    }
    -->

       



    </div>
}

<div>
    <p>
        <em>–°—Ç–∞–Ω:</em> <strong>@ButtonClickMessage</strong>
    </p>
</div>


<!-- –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä -->
@if (ShowProgress)
{
    <div style="margin-top: 1rem;">
        <label>–ü—Ä–æ–≥—Ä–µ—Å: @Progress%</label>
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width: @($"{Progress}%");" aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>
}

<!-- –í–∏–¥—ñ–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è -->
@if (!string.IsNullOrEmpty(SelectedImage) && SelectedFileInfo!= null)
{
    <div class="row align-items-start mt-4">
        <!-- –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è -->
        <div class="col-md-4 position-relative">
            <button type="button" class="btn-close" aria-label="Close" @onclick="CancelSelection"></button>
            
            <img src="@SelectedImage" class="img-thumbnail"/>
            
        </div>

        <!-- –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ -->
        <div class="col-md-8">

            <div class="mt-3">
                
                <EditForm Model="@SelectedFileInfo" OnValidSubmit="ApplyMetadata" class="p-4 border rounded shadow-sm bg-light">
                    <div class="form-group mb-3">
                        <label for="headline" class="form-label">–û–ø–∏—Å –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É)</label>
                        <InputText id="headline" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Prompt" placeholder="–û–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É" />
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="headline" class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                        <InputText id="headline" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Headline" placeholder="–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"/>
                    </div>

                    <div class="form-group mb-3">
                        <label for="caption" class="form-label">–û–ø–∏—Å</label>
                        <InputTextArea id="caption" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Caption" placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å" rows="4"/>
                    </div>

                    <div class="form-group mb-4">
                        <label for="keywords" class="form-label">–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</label>
                        <InputTextArea id="keywords" class="form-control" @bind-Value="SelectedFileInfo.MetadataForStock.Keywords" placeholder="–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É" rows="3"/>
                    </div>

                    <button type="submit" class="btn btn-primary">üíæ –ó–∞–ø–∏—Å–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ</button>

                    @if (downloadUrl != null)
                    {
                    <div class="mt-3">
                        <a href="@downloadUrl" class="btn btn-success" download="updated-image.jpg">‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏</a>
                    </div>
                    }
                </EditForm>
                
               
                
                <div>
                    <p><strong>Title: </strong> @SelectedFileInfo.MetadataForStock.Headline</p>
                    <p><strong>Category: </strong> @SelectedFileInfo.MetadataForStock.CategoryName</p>
                    <p><strong>Description: </strong> @SelectedFileInfo.MetadataForStock.Caption</p>
                    <p><strong>Keywords: </strong> @SelectedFileInfo.MetadataForStock.Keywords</p>
                </div>
            </div>
            
        </div>
    </div>
}


<!-- –ü—Ä–µ–≤'—é -->
@if (PagedPreviews.Any())
{
    <h5>–ü—Ä–µ–≤‚Äô—é –∑–æ–±—Ä–∞–∂–µ–Ω—å (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ @CurrentPage):</h5>
    <div class="thumbnail-grid">
        @foreach (var img in PagedPreviews)
        {
            <div class="col">
                <img src="@img" @key="img" class="preview-img"@onclick="async () => await SelectImageAsync(img)" />
            </div>
        }
    </div>

    <!-- –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è -->
    <div class="d-flex justify-content-between mt-3">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanGoPrev)">‚Üê –ù–∞–∑–∞–¥</button>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">–í–ø–µ—Ä–µ–¥ ‚Üí</button>
    </div>
}



@code {
    
    private List<FullFileInfo> ListOfFiles = new();
    private FullFileInfo SelectedFileInfo;
    
    
    private Guid FileInputKey = Guid.NewGuid(); // —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è InputFile
    private List<IBrowserFile> SelectedFiles = new();
    private List<string> MultipleImagePreviews = new();
    private string fileInputKey = Guid.NewGuid().ToString();  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è InputFile
    private int PageSize = 100;
    private int CurrentPage = 1;
    private int Progress = 0;
    private bool ShowProgress = false;
    private string? SelectedImage = null;
    private string ButtonClickMessage = "–û—á—ñ–∫—É—î—Ç—å—Å—è –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤...";
    private string? MetadataFromSelectedFile = null;
    private bool ShowPromptingSection = false;
    private IBrowserFile? selectedFile;
    private string? downloadUrl;
   
    
    [Inject]
    public IHttpClientFactory ClientFactory { get; set; }

    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = ClientFactory.CreateClient("API");
    }
    

    private IEnumerable<string> PagedPreviews =>
        MultipleImagePreviews.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private bool CanGoNext => (CurrentPage * PageSize) < MultipleImagePreviews.Count;
    private bool CanGoPrev => CurrentPage > 1;
    
    public async Task<string> CreateZipBase64Async()
    {
        List<FileInfoSimple> ListOfFilesSimple = ListOfFiles
            .Select(f => new FileInfoSimple
            {
                MetadataForStock = f.MetadataForStock,
                NewBase64 = f.NewBase64,
                Name = f.File.Name
            })
            .ToList();

        var content = new MultipartFormDataContent();

        // –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª–∏
        foreach (var file in ListOfFilesSimple)
        {
            var bytes = Convert.FromBase64String(file.NewBase64);
            var byteArrayContent = new ByteArrayContent(bytes);
            byteArrayContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            content.Add(byteArrayContent, "files", file.Name);
        }

        // –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
        var metadataJson = JsonSerializer.Serialize(ListOfFilesSimple);
        content.Add(new StringContent(metadataJson, Encoding.UTF8, "application/json"), "metadata");

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç
        var response = await httpClient.PostAsync("api/metadata/generate-multipart", content);

        if (response.IsSuccessStatusCode)
        {
            var archiveUrl = await response.Content.ReadAsStringAsync();
            return archiveUrl;
        }

        var errorContent = await response.Content.ReadAsStringAsync();
        throw new Exception($"–ü–æ–º–∏–ª–∫–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ö–æ–¥: {(int)response.StatusCode} {response.StatusCode}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {errorContent}");
    }


    
    public async Task<string> GenerateCsv(List<FullFileInfo> files)
    {
        ButtonClickMessage = $"–ì–æ—Ç—É—î—Ç—å—Å—è CSV‚Ä¶";
        StateHasChanged();
        await Task.Yield(); // üëà –≤–∞–∂–ª–∏–≤–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î –ø–æ—Ç—ñ–∫

        var sb = new System.Text.StringBuilder();

        sb.AppendLine("Filename,Title,Keywords,Category,CategoryName,Prompt");

        for (int i = 0; i < files.Count; i++)
        {
            var fileInfo = files[i];

            string filename = EscapeCsv(fileInfo.File.Name);
            string title = EscapeCsv(fileInfo.MetadataForStock.Caption ?? "");
            string keywords = EscapeCsv(fileInfo.MetadataForStock.Keywords ?? "");
            string prompt = EscapeCsv(fileInfo.MetadataForStock.Prompt ?? "");
            string categoryName = EscapeCsv(fileInfo.MetadataForStock.CategoryName ?? "");
            string category = EscapeCsv(fileInfo.MetadataForStock.Category.ToString());

            sb.AppendLine($"{filename},{title},{keywords},{category},{categoryName},{prompt}");

            // üëá –†–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É (—Ä–∞–∑ –Ω–∞ 10 –∑–∞–ø–∏—Å—ñ–≤)
            if (i % 10 == 0)
            {
                ButtonClickMessage = $"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CSV: {i + 1} –∑ {files.Count}";
                StateHasChanged();
                await Task.Yield();
            }
        }

        return sb.ToString();
    }
    
    private string EscapeCsv(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";

        bool mustQuote = value.Contains(',') || value.Contains('"') || value.Contains('\n') || value.Contains('\r');

        if (mustQuote)
        {
            // –ü–æ–¥–≤–æ—é—î–º–æ –ª–∞–ø–∫–∏
            value = value.Replace("\"", "\"\"");
            return $"\"{value}\"";
        }

        return value;
    }
    
    private async Task ApplyMetadata()
    {
        if (SelectedFileInfo == null)
            return;
        
        var response = await httpClient.PostAsJsonAsync("api/metadata/apply", new
        {
            Image = SelectedFileInfo.Base64,
            Headline = SelectedFileInfo.MetadataForStock.Headline,
            Caption = SelectedFileInfo.MetadataForStock.Caption,
            Keywords = SelectedFileInfo.MetadataForStock.Keywords
        });

        SelectedFileInfo.NewBase64 = await response.Content.ReadAsStringAsync();

        SelectedFileInfo.DownloadUrl = $"data:image/jpeg;base64,{ SelectedFileInfo.NewBase64 }";
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        ClearAll(false);
        
        try
        {
            var files = e.GetMultipleFiles(5000);
            SelectedFiles.AddRange(files);

            ShowProgress = true;
            Progress = 0;

            int processedFiles = 0;
            foreach (var file in SelectedFiles)
            {
                if (file.ContentType.StartsWith("image/") && file.Size <= Const.MaxFileSize)
                {
                    using var stream = file.OpenReadStream(Const.MaxFileSize);
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);

                    var base64 = Convert.ToBase64String(ms.ToArray());
                    MultipleImagePreviews.Add($"data:{file.ContentType};base64,{base64}");
                    
                    // –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª —ñ –π–æ–≥–æ Base64 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
                    FullFileInfo _FileInfo = new();

                    _FileInfo.File = file;
                    _FileInfo.Base64 = base64;
                    
                    ListOfFiles.Add(_FileInfo);
                    
                    ms.Seek(0, SeekOrigin.Begin); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç—ñ–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                    
                    processedFiles++;
                    Progress = (int)((double)processedFiles / SelectedFiles.Count * 100);
                    StateHasChanged(); // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
                }
            }

            CurrentPage = 1;
            ButtonClickMessage = $"–§–∞–π–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {SelectedFiles.Count}";
            ShowProgress = false;
        }
        catch (Exception ex)
        {
            ButtonClickMessage = $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ–∞–π–ª—ñ–≤: {ex.Message}";
            ShowProgress = false;
        }
    }

    private async Task ProcessImages()
    {
        if (SelectedFiles.Count > 0)
        {
            ButtonClickMessage = $"–§–∞–π–ª—ñ–≤ –¥–æ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è: {SelectedFiles.Count}";
            StateHasChanged();
            
            ButtonClickMessage = $"–†–æ–∑–ø–æ—á–∞—Ç–æ –ø—Ä–æ—Ü–µ—Å –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è...";
            StateHasChanged();

            int processed = 0;

            foreach (FullFileInfo _fullFileInfo in ListOfFiles)
            {
                SelectedFileInfo = _fullFileInfo;

                try
                {
                    SelectedFileInfo.MetadataForStock.Prompt = await SelectedFileInfo.MetadataForStock.GetPromptFromMetadata(SelectedFileInfo);
                    await SendPrompt();
                    await ApplyMetadata();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("–ü–æ–º–∏–ª–∫–∞: " + ex.Message);
                    ButtonClickMessage = $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {SelectedFileInfo.File.Name}: {ex.Message}";
                    StateHasChanged();
                    continue; // –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–∞–π–ª—É
                }

                processed++;
                ButtonClickMessage = $"–§–∞–π–ª—ñ–≤ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ : {processed} –∑ {SelectedFiles.Count}";
                StateHasChanged();
            }

            ButtonClickMessage = "–§–æ—Ä–º—É—î—Ç—å—Å—è –∞—Ä—Ö—ñ–≤...";
            StateHasChanged();

            await Task.Yield();
            
            downloadUrl = await CreateZipBase64Async(); // –ø–æ–≤–µ—Ä—Ç–∞—î —â–æ—Å—å —Ç–∏–ø—É "tmp/abc123.zip"
           
            //downloadUrl = $"/{fileName}";

            ButtonClickMessage = "–ê—Ä—Ö—ñ–≤ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.";
            StateHasChanged();
        }
    }

    private void ClearAll(bool withrender)
    {
        try
        {
            SelectedFiles.Clear();
            ListOfFiles.Clear();
            MultipleImagePreviews.Clear();

            if (withrender)
            {
                FileInputKey = Guid.NewGuid(); // –ø—Ä–∏–º—É—à—É—î Blazor –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏ InputFile  
            }
            
            CurrentPage = 1;
            Progress = 0;
            SelectedImage = null;
            SelectedFileInfo = null;
            ShowProgress = false;
            ShowPromptingSection = false;
            
            ButtonClickMessage = "–°–∫–∏–Ω—É—Ç–æ. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ–∞–π–ª–∏.";
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
 
    }

    private void CancelSelection()
    {
        // –°–∫–∏–¥–∞—î –≤–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        SelectedImage = null;
    }

    private void NextPage()
    {
        if (CanGoNext) CurrentPage++;
    }

    private void PrevPage()
    {
        if (CanGoPrev) CurrentPage--;
    }

    private async Task SelectImageAsync(string image)
    {
        SelectedImage = image;
        
        
        var base64Data = SelectedImage.Substring(SelectedImage.IndexOf(",") + 1);
        SelectedFileInfo = ListOfFiles.Find(m => m.Base64 == base64Data);

        if (SelectedFileInfo!= null)
        {
            if (string.IsNullOrEmpty(SelectedFileInfo.MetadataForStock.Prompt))
            {
                SelectedFileInfo.MetadataForStock.Prompt = await SelectedFileInfo.MetadataForStock.GetPromptFromMetadata(SelectedFileInfo);
            }
        }
    }
}

@code {
    private Dictionary<string, object>? resultDict;
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
    
    private string Prompt { get; set; } = @"Act as a professional stock content expert with deep knowledge of visual trends, keyword optimization, and commercial relevance. Your task is to analyze the uploaded image and generate a structured stock-ready output in valid JSON format, using the most accurate and up-to-date stock terminology.

Ensure the content is highly relevant, commercially usable, and optimized for searchability. Use trendy, specific, and high-ranking keywords commonly used on platforms like Shutterstock, Adobe Stock, iStock, etc. Avoid generic or outdated terms.

Your response must include the following fields:

""title"" ‚Äì A short, descriptive, and engaging title (maximum 10 words).

""categoryName"" ‚Äì The most accurate image category based on standard stock taxonomy.
 (1. Animals: Content related to animals, insects, or pets ‚Äî at home or in the wild. 
2. Buildings and Architecture: Structures like homes, interiors, offices, temples, barns, factories, and shelters. 
3. Business: People in business settings, offices, business concepts, finance, and money
4. Drinks: Content related to beer, wine, spirits, and other drinks. 
5. The Environment: Depictions of nature or the places we work and live. 
6. States of Mind: Content related to people‚Äôs emotions and inner voices. 
7. Food: Anything focused on food and eating. 
8. Graphic Resources: Backgrounds, textures, and symbols. 
9. Hobbies and Leisure: Pastime activities that bring joy and/or relaxation, such as knitting, building model airplanes, and sailing. 
10. Industry: Depictions of work and manufacturing, like building cars, forging steel, producing clothing, or producing energy. 
11. Landscape: Vistas, cities, nature, and other locations. 
12. Lifestyle: The environments and activities of people at home, work, and play. 
13. People: People of all ages, ethnicities, cultures, genders, and abilities. 
14. Plants and Flowers: Close-ups of the natural world. 
15. Culture and Religion: Depictions of the traditions, beliefs, and cultures of people around the world. 
16. Science: Content with a focus on the applied, natural, medical, and theoretical sciences. 
17. Social Issues: Poverty, inequality, politics, violence, and other depictions of social issues. 
18. Sports: Content focused on sports and fitness, including football, basketball, hunting, yoga, and skiing. 
19. Technology: Computers, smartphones, virtual reality, and other tools designed to increase productivity. 
20. Transport: Different types of transportation, including cars, buses, trains, planes, and highway systems. 
21. Travel: Local and worldwide travel, culture, and lifestyles.)

""category"" ‚Äì number related to ""categoryName"" 

""description"" ‚Äì A clear, medium-length description (2‚Äì3 sentences) that highlights the visual content, composition, colors, emotions, and possible commercial applications (maximum 150 characters, it is strong rule!).

""keywords"" ‚Äì CSV formatted string with default separator (a comma) :exactly 30 highly relevant, trend-aware, and stock-optimized keywords, including popular search terms like ""isolated"", ""copy space"", ""cut out"", ""flat lay"", ""top view"", ""minimalist"", ""authentic"", ""trendy"", ""vibrant colors"", ""clean design"", etc., depending on the image content.";

    private string Response { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;


    private async Task SendPrompt()
    {
        if (string.IsNullOrWhiteSpace(Prompt)) return;

        IsLoading = true;
        Response = "";

        try
        {
            string _promtforgemmini = Prompt;

            if (!string.IsNullOrEmpty(SelectedFileInfo.MetadataForStock.Prompt))
            {
                _promtforgemmini = _promtforgemmini +  "\n\n For better context, here is the prompt used to generate the image:" + SelectedFileInfo.MetadataForStock.Prompt;
            }
            resultDict = await Gemini.GetImageInfo(SelectedFileInfo, _promtforgemmini);
            await Task.Delay(1000);
            
            SelectedFileInfo.MetadataForStock.Headline = resultDict.GetValueOrDefault("title").ToString();
            SelectedFileInfo.MetadataForStock.Keywords = resultDict.GetValueOrDefault("keywords").ToString();
            SelectedFileInfo.MetadataForStock.Caption = resultDict.GetValueOrDefault("description").ToString();
            SelectedFileInfo.MetadataForStock.Category = Int32.Parse(resultDict.GetValueOrDefault("category").ToString());
            SelectedFileInfo.MetadataForStock.CategoryName = resultDict.GetValueOrDefault("categoryName").ToString();
            
            //   string json = await Gemini.GetAnswer(filePath, apiKey, Prompt);
            //resultDict = await Gemini.GetAnswerD(filePath, apiKey, Prompt);

            // Response = json;
        }
        catch (Exception ex)
        {
            Response = $"‚ùå –ü–æ–º–∏–ª–∫–∞: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

}

<style>
    .preview-img {
        width: 100%;
        max-height: 150px;
        max-width: 150px;
        object-fit: cover;
        border: 2px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }
    .thumbnail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        margin-top: 1rem;
    }
</style>