using System.IO.Compression;

namespace Imaginator;

public class BackgroundArchiveWorker : BackgroundService
{
    private readonly IWebHostEnvironment _env;
    private readonly IBackgroundProcessingQueue _queue;
    private readonly IProcessingStatusService _status;

    public BackgroundArchiveWorker(IWebHostEnvironment env, IBackgroundProcessingQueue queue, IProcessingStatusService status)
    {
        _env = env;
        _queue = queue;
        _status = status;
    }
    
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                
                Console.WriteLine("üü¢ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —á–µ—Ä–∑—ñ...");

                while (!stoppingToken.IsCancellationRequested)
                {
                    var uploadId = await _queue.DequeueAsync(stoppingToken);
                    Console.WriteLine($"üì¶ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∞—Ä—Ö—ñ–≤—É: {uploadId}");

                    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —á–µ—Ä–≥–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

                    _status.SetStatus(uploadId, "processing");

                    var inputFolder = Path.Combine(_env.WebRootPath, "uploads", uploadId.ToString());
                    var archiveFolder = Path.Combine(_env.WebRootPath, "archives");
                    
                    Directory.CreateDirectory(archiveFolder);

                    var archivePath = Path.Combine(archiveFolder, $"{uploadId}.zip");

                    if (File.Exists(archivePath)) File.Delete(archivePath);

                    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏ –≤ –ø–∞–ø—Ü—ñ
                    Console.WriteLine("–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –ë–ï–ö");
                    ZipFile.CreateFromDirectory(inputFolder, archivePath);

                    _status.SetStatus(uploadId, "done");

                    // –í–∏–¥–∞–ª—è—î–º–æ –ø–∞–ø–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏ –ø—ñ—Å–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó
                    Directory.Delete(inputFolder, true);
                    
                }
            }
            catch (OperationCanceledException)
            {
                // –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞
                break;
            }
            catch (Exception ex)
            {
                _status.SetStatus(Guid.Empty, "error"); // –ê–±–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ uploadId, —è–∫—â–æ —î
                Console.WriteLine($"Error in BackgroundArchiveWorker: {ex.Message}");
            }
        }
    }
}
